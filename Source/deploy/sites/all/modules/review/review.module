<?php
/**
 * Implements hook_menu().
 */
function review_menu() {
  $items['admin/config/development/review'] = array(
    'title' => 'Site Review Configuration',
    'description' => 'Configuration options for Site Review content.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_configuration_form'),
    'access arguments' => array('administer hcp review configuration'),
    'file' => 'review_admin.inc',
  );

  $items['admin/config/development/review/setup'] = array(
    'title' => 'Site Review Configuration',
    'description' => 'Configuration options for Site Review content.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_configuration_form'),
    'access arguments' => array('administer hcp review configuration'),
    'file' => 'review_admin.inc',
  );
  
  return $items;
}



/**
 * Implements hook_block_info().
 */
function review_block_info() {
  $blocks = array();
  $blocks['review_select_form'] =  array(
    'info' => t('My site review'),
    'page callback' => 'my_site_review',
    'access argument' => array('access content'),
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function review_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
  

  switch ($delta) {
    case 'review_select_form':
      $block['subject'] = t('Review');
      $block['content'] = drupal_get_form('review_form');
    break;
  }
  return $block;
}

/**
 * Custom form.
 */
function review_form($form, &$form_state) {
   

//   <div id="test-popup" class="white-popup mfp-hide">
//   print_r('Hello');
// </div>

//   drupal_add_js(drupal_get_path('module', 'review') . '/review.js');
//   drupal_add_js(drupal_get_path('module', 'review') . 'js/jquery.magnific-popup.js');
//   drupal_add_js(drupal_get_path('module', 'review') . 'js/jquery.magnific-popup.min.js');
//   drupal_add_css(drupal_get_path('module', 'review') . 'css/magnific-popup.js');

  
  $form['experience'] = array(
    '#type' => 'radios',
    '#title' => t('Share your experience'),
    '#options' => array(
         'Good'=>'Good',
         'Average'=>'Average',
         'Bad'=>'Bad'),
         );
         
  $form['reason'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Reason'),
    '#options' => array(
           'Content' =>'Content',
           'Performance' => 'Performance',
           'UI'=>'UI',
            ),
    '#states' => array(
            'visible' => array(
            ':input[name="experience"]' => array('value' => 'Bad'),
            //':input[name="experience"]' => array('value' => 3),
            ),
            ),
            );
   $form['comments'] = array(
    '#type' => 'textfield',
    '#title' => t('Comments'),
    '#description' => 'Please write any comments',
    '#size' => 50,
    '#maxlength' => 50,
    '#required' => TRUE,
    );
  

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Button'),
  );

  return $form;
}


/**
 * Implements security_settings_form_submit().
 */
function review_form_submit($form, $form_state) {
   
   //$checked = array_filter($form_state['values']['reason']);
  $value = $form_state['values']['reason'];
  if (in_array("Content", $value, TRUE)) {
    $content_value = 1;
  }

  elseif(in_array("Performance", $value,TRUE)) {
    $performance_value = 1;
  }
  elseif(in_array("UI", $value,TRUE)) {
    $ui_value = 1;
  }
  //$rea = implode(",", $form_state['values']['reason']);
  //echo $rea;
  //print_r($form_state['values']['experience']);
  // exit;
  global $user; 
  // Here u can insert Your custom form values into your custom table.
//foreach ($checked as $value) {
$insert_node = db_insert('hcp_review')
     ->fields(array(
      'uid' => $user->uid,
      'experience' => $form_state['values']['experience'],
      'content' => $content_value,
      'performance' =>$performance_value,
      'ui' =>$ui_value,
      'comment' => $form_state['values']['comments'],
      ))->execute();
     drupal_set_message("successfully saved"); 
}

 /**
 *Magnific Popup core JS file
 */

//drupal_add_js(drupal_get_path('module', 'review') . '/review.js');

/**
 * Submit handler for review configuration.
 *
 *
 * @ingroup form.
 */
function review_configuration_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $values = $form_state['values'];

  /*foreach ($values as $variable_name => $value) {
    // If the variable is an image then we need to convert to use uuid.
    if (in_array($variable_name, $images)) {
      if ($file_object = file_load($value)) {
        if (property_exists($file_object, 'uuid')) {
          $value = $file_object->uuid;
        }
      }
    }*/

    //variable_set($variable_name, $value);

  drupal_set_message(t('The configuration has been successfully saved.'));
}

/**
 * Implements hook_permission().
 */
function review_permission() {
  return array(
    'administer hcp review configuration' => array(
      'title' => t('Administer HCP: review integration'),
      'description' => t('Perform administration tasks within the review administrative functionality.'),
    ),
  );
}